require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ReviewsController, :type => :controller do


  # This should return the minimal set of attributes required to create a valid
  # Review. As you add validations to Review, be sure to
  # adjust the attributes here as well.
 before(:all) do
  User.destroy_all
  Book.destroy_all
  @user = FactoryGirl.create(:user)
  @book = FactoryGirl.create(:book)
  @inactive_book = FactoryGirl.create(:book, is_active: false)
 end

  before(:each) do
    request.env["HTTP_REFERER"] = books_path
  end

  let(:valid_attributes) { {
    text: 'This is the review',
    user_id: @user.id,
    book_id: @book.id
  } }

  let(:invalid_attributes) { {
    text: '',
    user_id: @user.id,
    book_id: @book.id
  } }


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ReviewsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all reviews as @reviews" do
      review = Review.create! valid_attributes
      get :index, { :book_id=>@book }, valid_session
      expect(assigns(:reviews)).to eq([review])
    end
  end

  describe "GET show" do
    it "assigns the requested review as @review" do
      review = Review.create! valid_attributes
      get :show, { :book_id=>@book, :id => review.to_param}, valid_session
      expect(assigns(:review)).to eq(review)
    end
  end

  describe "GET new" do
    it "assigns a new review as @review" do
      get :new, { :book_id=>@book }, valid_session
      expect(assigns(:review)).to be_a_new(Review)
    end

    it "does not assign a new review of an inactive book" do
      get :new, { :book_id=>@inactive_book }, valid_session
      expect(assigns(:review)).not_to be_a_new(Review)
    end
  end

  describe "GET edit" do
    it "assigns the requested review as @review" do
      review = Review.create! valid_attributes
      get :edit, { :book_id=>@book, :id => review.to_param}, valid_session
      expect(assigns(:review)).to eq(review)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Review" do
        sign_in @user
        expect {
          post :create, { :book_id => @book, :review => valid_attributes}, valid_session
        }.to change(Review, :count).by(1)
      end

      it "assigns a newly created review as @review" do
        sign_in @user
        post :create, { :book_id  => @book, :review => valid_attributes}, valid_session
        expect(assigns(:review)).to be_a(Review)
        expect(assigns(:review)).to be_persisted
      end

      it "redirects to the created review" do
        sign_in @user
        post :create, { :book_id => @book, :review => valid_attributes}, valid_session
        expect(response).to redirect_to([@book, Review.last])
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved review as @review" do
        sign_in @user
        post :create, {:book_id => @book, :review => invalid_attributes}, valid_session
        expect(assigns(:review)).to be_a_new(Review)
      end

      it "re-renders the 'new' template" do
        sign_in @user
        post :create, {:book_id => @book, :review => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) { {
           text: 'This is the updated review',
           user_id: @user.id,
           book_id: @book.id
      } }

      it "updates the requested review" do
        sign_in @user
        review = Review.create! valid_attributes
        put :update, { :book_id => @book, :id => review.to_param, :review => new_attributes}, valid_session
        review.reload
        #skip("Add assertions for updated state")
      end

      it "assigns the requested review as @review" do
        sign_in @user
        review = Review.create! valid_attributes
        put :update, {:book_id => @book, :id => review.to_param, :review => valid_attributes}, valid_session
        expect(assigns(:review)).to eq(review)
      end

      it "redirects to the review" do
        sign_in @user
        review = Review.create! valid_attributes
        put :update, {:book_id => @book, :id => review.to_param, :review => valid_attributes}, valid_session
        expect(response).to redirect_to([@book, review])
      end
    end

    describe "with invalid params" do
      it "assigns the review as @review" do
        sign_in @user
        review = Review.create! valid_attributes
        put :update, {:book_id => @book, :id => review.to_param, :review => invalid_attributes}, valid_session
        expect(assigns(:review)).to eq(review)
      end

      it "re-renders the 'edit' template" do
        sign_in @user
        review = Review.create! valid_attributes
        put :update, {:book_id => @book, :id => review.to_param, :review => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested review" do
      sign_in @user
      review = Review.create! valid_attributes
      expect {
        delete :destroy, {:book_id => @book, :id => review.to_param}, valid_session
      }.to change(Review, :count).by(-1)
    end

    it "redirects to the reviews list" do
      sign_in @user
      review = Review.create! valid_attributes
      delete :destroy, {:book_id => @book, :id => review.to_param}, valid_session
      expect(response).to redirect_to(book_reviews_url)
    end
  end

end
